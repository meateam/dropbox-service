// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dropbox

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DropboxClient is the client API for Dropbox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DropboxClient interface {
	GetApproverInfo(ctx context.Context, in *GetApproverInfoRequest, opts ...grpc.CallOption) (*GetApproverInfoResponse, error)
	CanApproveToUser(ctx context.Context, in *CanApproveToUserRequest, opts ...grpc.CallOption) (*CanApproveToUserResponse, error)
	CreateRequest(ctx context.Context, in *CreateRequestRequest, opts ...grpc.CallOption) (*CreateRequestResponse, error)
	HasTransfer(ctx context.Context, in *HasTransferRequest, opts ...grpc.CallOption) (*HasTransferResponse, error)
	GetTransfersInfo(ctx context.Context, in *GetTransfersInfoRequest, opts ...grpc.CallOption) (*GetTransfersInfoResponse, error)
}

type dropboxClient struct {
	cc grpc.ClientConnInterface
}

func NewDropboxClient(cc grpc.ClientConnInterface) DropboxClient {
	return &dropboxClient{cc}
}

func (c *dropboxClient) GetApproverInfo(ctx context.Context, in *GetApproverInfoRequest, opts ...grpc.CallOption) (*GetApproverInfoResponse, error) {
	out := new(GetApproverInfoResponse)
	err := c.cc.Invoke(ctx, "/dropbox.Dropbox/GetApproverInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropboxClient) CanApproveToUser(ctx context.Context, in *CanApproveToUserRequest, opts ...grpc.CallOption) (*CanApproveToUserResponse, error) {
	out := new(CanApproveToUserResponse)
	err := c.cc.Invoke(ctx, "/dropbox.Dropbox/CanApproveToUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropboxClient) CreateRequest(ctx context.Context, in *CreateRequestRequest, opts ...grpc.CallOption) (*CreateRequestResponse, error) {
	out := new(CreateRequestResponse)
	err := c.cc.Invoke(ctx, "/dropbox.Dropbox/CreateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropboxClient) HasTransfer(ctx context.Context, in *HasTransferRequest, opts ...grpc.CallOption) (*HasTransferResponse, error) {
	out := new(HasTransferResponse)
	err := c.cc.Invoke(ctx, "/dropbox.Dropbox/HasTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropboxClient) GetTransfersInfo(ctx context.Context, in *GetTransfersInfoRequest, opts ...grpc.CallOption) (*GetTransfersInfoResponse, error) {
	out := new(GetTransfersInfoResponse)
	err := c.cc.Invoke(ctx, "/dropbox.Dropbox/GetTransfersInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DropboxServer is the server API for Dropbox service.
// All implementations must embed UnimplementedDropboxServer
// for forward compatibility
type DropboxServer interface {
	GetApproverInfo(context.Context, *GetApproverInfoRequest) (*GetApproverInfoResponse, error)
	CanApproveToUser(context.Context, *CanApproveToUserRequest) (*CanApproveToUserResponse, error)
	CreateRequest(context.Context, *CreateRequestRequest) (*CreateRequestResponse, error)
	HasTransfer(context.Context, *HasTransferRequest) (*HasTransferResponse, error)
	GetTransfersInfo(context.Context, *GetTransfersInfoRequest) (*GetTransfersInfoResponse, error)
	mustEmbedUnimplementedDropboxServer()
}

// UnimplementedDropboxServer must be embedded to have forward compatible implementations.
type UnimplementedDropboxServer struct {
}

func (UnimplementedDropboxServer) GetApproverInfo(context.Context, *GetApproverInfoRequest) (*GetApproverInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApproverInfo not implemented")
}
func (UnimplementedDropboxServer) CanApproveToUser(context.Context, *CanApproveToUserRequest) (*CanApproveToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanApproveToUser not implemented")
}
func (UnimplementedDropboxServer) CreateRequest(context.Context, *CreateRequestRequest) (*CreateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRequest not implemented")
}
func (UnimplementedDropboxServer) HasTransfer(context.Context, *HasTransferRequest) (*HasTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasTransfer not implemented")
}
func (UnimplementedDropboxServer) GetTransfersInfo(context.Context, *GetTransfersInfoRequest) (*GetTransfersInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransfersInfo not implemented")
}
func (UnimplementedDropboxServer) mustEmbedUnimplementedDropboxServer() {}

// UnsafeDropboxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DropboxServer will
// result in compilation errors.
type UnsafeDropboxServer interface {
	mustEmbedUnimplementedDropboxServer()
}

func RegisterDropboxServer(s grpc.ServiceRegistrar, srv DropboxServer) {
	s.RegisterService(&_Dropbox_serviceDesc, srv)
}

func _Dropbox_GetApproverInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApproverInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropboxServer).GetApproverInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dropbox.Dropbox/GetApproverInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropboxServer).GetApproverInfo(ctx, req.(*GetApproverInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dropbox_CanApproveToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanApproveToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropboxServer).CanApproveToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dropbox.Dropbox/CanApproveToUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropboxServer).CanApproveToUser(ctx, req.(*CanApproveToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dropbox_CreateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropboxServer).CreateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dropbox.Dropbox/CreateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropboxServer).CreateRequest(ctx, req.(*CreateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dropbox_HasTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropboxServer).HasTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dropbox.Dropbox/HasTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropboxServer).HasTransfer(ctx, req.(*HasTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dropbox_GetTransfersInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransfersInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropboxServer).GetTransfersInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dropbox.Dropbox/GetTransfersInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropboxServer).GetTransfersInfo(ctx, req.(*GetTransfersInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dropbox_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dropbox.Dropbox",
	HandlerType: (*DropboxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetApproverInfo",
			Handler:    _Dropbox_GetApproverInfo_Handler,
		},
		{
			MethodName: "CanApproveToUser",
			Handler:    _Dropbox_CanApproveToUser_Handler,
		},
		{
			MethodName: "CreateRequest",
			Handler:    _Dropbox_CreateRequest_Handler,
		},
		{
			MethodName: "HasTransfer",
			Handler:    _Dropbox_HasTransfer_Handler,
		},
		{
			MethodName: "GetTransfersInfo",
			Handler:    _Dropbox_GetTransfersInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dropbox.proto",
}
